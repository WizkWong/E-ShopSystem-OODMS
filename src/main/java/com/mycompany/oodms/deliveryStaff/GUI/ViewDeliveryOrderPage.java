package com.mycompany.oodms.deliveryStaff.GUI;

import com.mycompany.oodms.OODMS;
import com.mycompany.oodms.deliveryStaff.DeliveryStaff;
import com.mycompany.oodms.deliveryStaff.DeliveryStaffDao;
import com.mycompany.oodms.order.CustomerOrder;
import com.mycompany.oodms.order.CustomerOrderDao;
import com.mycompany.oodms.order.DeliveryOrder;
import com.mycompany.oodms.order.DeliveryOrderDao;
import com.mycompany.oodms.order.DeliveryStatus;
import com.mycompany.oodms.user.UserDao;
import java.time.LocalDateTime;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class ViewDeliveryOrderPage extends javax.swing.JPanel {

    private final DefaultTableModel OrderTableModel;
    private final List<CustomerOrder> customerOrderList;
    private final CustomerOrderDao customerOrderDao;
    private final DeliveryOrderDao deliveryOrderDao;
    private final DeliveryStaffDao deliveryStaffDao;

    private boolean allSection;
    private boolean pendingSection;
    private boolean deliveringSection;
    private boolean deliveredSection;

    public ViewDeliveryOrderPage() {
        customerOrderDao = OODMS.getCustomerOrderDao();
        deliveryOrderDao = OODMS.getDeliveryOrderDao();
        deliveryStaffDao = OODMS.getDeliveryStaffDao();
        initComponents();

        // Set each section button to true and false, true if lowered, false if raised
        allSection = true;
        pendingSection = false;
        deliveringSection = false;
        deliveredSection = false;

        // Disable all buttons
        ViewOrderDetailBut.setEnabled(false);
        AcceptOrderBut.setEnabled(false);
        DeliveredOrderBut.setEnabled(false);

        //Only allow selection on single row
        OrderTab.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //Not allowing focus selection on single cell
        OrderTab.setFocusable(false);

        // Set height and width for each row and column
        OrderTab.getColumnModel().getColumn(0).setPreferredWidth(15);
        OrderTab.getColumnModel().getColumn(1).setPreferredWidth(85);
        OrderTab.getColumnModel().getColumn(2).setPreferredWidth(60);
        OrderTab.getColumnModel().getColumn(3).setPreferredWidth(100);
        OrderTab.getColumnModel().getColumn(4).setPreferredWidth(70);
        OrderTab.getColumnModel().getColumn(5).setPreferredWidth(65);
        OrderTab.getColumnModel().getColumn(6).setPreferredWidth(130);
        OrderTab.getColumnModel().getColumn(7).setPreferredWidth(130);
        OrderTab.setRowHeight(20);

        // Center the allignment for both column
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        OrderTab.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);

        OrderTableModel = (DefaultTableModel) OrderTab.getModel();

        // Get every data of customer order that is assign to the current delivery staff
        //customerOrderList = deliveryOrderDao.getByDeliveryStaffId(OODMS.currentUser.getId());
        customerOrderList = customerOrderDao.getAll();

        // Append every data into the table
        loadTable(customerOrderDao.getAllbyDeliveryStaffId((DeliveryStaff) OODMS.currentUser));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLab = new javax.swing.JLabel();
        BackBut = new javax.swing.JButton();
        SearchLab = new javax.swing.JLabel();
        SearchTxt = new javax.swing.JTextField();
        SearchBarLab = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderTab = new javax.swing.JTable();
        AllBut = new javax.swing.JButton();
        PendingBut = new javax.swing.JButton();
        DeliveringBut = new javax.swing.JButton();
        DeliveredBut = new javax.swing.JButton();
        ViewOrderDetailBut = new javax.swing.JButton();
        AcceptOrderBut = new javax.swing.JButton();
        DeliveredOrderBut = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1275, 600));
        setPreferredSize(new java.awt.Dimension(1275, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TitleLab.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        TitleLab.setText("View Delivery Order");
        add(TitleLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, -1, -1));

        BackBut.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BackBut.setText("Back");
        BackBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButActionPerformed(evt);
            }
        });
        add(BackBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        SearchLab.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchLab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SearchLab.setText("Search Order :");
        add(SearchLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 100, 40));

        SearchTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTxtsearchEngine(evt);
            }
        });
        add(SearchTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 860, -1));

        SearchBarLab.setForeground(new java.awt.Color(204, 0, 255));
        SearchBarLab.setText("*Only Order ID, Delivery Status & Customer ID can be search");
        add(SearchBarLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, -1, 30));

        OrderTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Total Product Type", "Total Price", "Order Date Time", "Delivery Status", "Customer ID", "Assigned Date Time", "Delivered Date Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderTab.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        OrderTab.getTableHeader().setReorderingAllowed(false);
        OrderTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OrderTabMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(OrderTab);
        if (OrderTab.getColumnModel().getColumnCount() > 0) {
            OrderTab.getColumnModel().getColumn(0).setResizable(false);
            OrderTab.getColumnModel().getColumn(1).setResizable(false);
            OrderTab.getColumnModel().getColumn(2).setResizable(false);
            OrderTab.getColumnModel().getColumn(3).setResizable(false);
            OrderTab.getColumnModel().getColumn(4).setResizable(false);
            OrderTab.getColumnModel().getColumn(6).setResizable(false);
            OrderTab.getColumnModel().getColumn(7).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 970, -1));

        AllBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        AllBut.setText("All");
        AllBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        AllBut.setFocusable(false);
        AllBut.setMargin(new java.awt.Insets(3, 14, 3, 14));
        AllBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllButActionPerformed(evt);
            }
        });
        add(AllBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 140, -1));

        PendingBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        PendingBut.setText("Pending");
        PendingBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PendingBut.setFocusable(false);
        PendingBut.setMargin(new java.awt.Insets(3, 14, 3, 14));
        PendingBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PendingButActionPerformed(evt);
            }
        });
        add(PendingBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 140, -1));

        DeliveringBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        DeliveringBut.setText("Delivering");
        DeliveringBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DeliveringBut.setFocusable(false);
        DeliveringBut.setMargin(new java.awt.Insets(3, 14, 3, 14));
        DeliveringBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeliveringButActionPerformed(evt);
            }
        });
        add(DeliveringBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 140, -1));

        DeliveredBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        DeliveredBut.setText("Delivered");
        DeliveredBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DeliveredBut.setFocusable(false);
        DeliveredBut.setMargin(new java.awt.Insets(3, 14, 3, 14));
        DeliveredBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeliveredButActionPerformed(evt);
            }
        });
        add(DeliveredBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 120, 140, -1));

        ViewOrderDetailBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        ViewOrderDetailBut.setText("View Order Detail");
        ViewOrderDetailBut.setToolTipText("");
        ViewOrderDetailBut.setFocusable(false);
        ViewOrderDetailBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewOrderDetailButActionPerformed(evt);
            }
        });
        add(ViewOrderDetailBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 280, 170, -1));

        AcceptOrderBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        AcceptOrderBut.setText("Accept Order");
        AcceptOrderBut.setToolTipText("");
        AcceptOrderBut.setFocusable(false);
        AcceptOrderBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptOrderButActionPerformed(evt);
            }
        });
        add(AcceptOrderBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 350, 170, -1));

        DeliveredOrderBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        DeliveredOrderBut.setText("Delivered Order");
        DeliveredOrderBut.setToolTipText("");
        DeliveredOrderBut.setFocusable(false);
        DeliveredOrderBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeliveredOrderButActionPerformed(evt);
            }
        });
        add(DeliveredOrderBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 420, 170, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void loadTable(List<CustomerOrder> customerOrderList) {
        // Remove all the data from the table
        int itemRow = OrderTableModel.getRowCount();
        for (int i = itemRow - 1; i >= 0; i--) {
            OrderTableModel.removeRow(i);
        }

        // Add every data into the table
        customerOrderList.forEach(order -> OrderTableModel.addRow(new Object[]{
            order.getId(),
            order.getOrderDetail().size(),
            order.getCustomerOrderPayment().getTotalPrice(),
            order.getStringOrderDateTime(),
            order.getDeliveryOrder().getDeliveryStatus().getStatus(),
            order.getCustomer().getId(),
            order.getDeliveryOrder().getStringAssignDateTime() == null ? "N/A" : order.getDeliveryOrder().getStringAssignDateTime(),
            order.getDeliveryOrder().getStringDeliveredDateTime() == null ? "N/A" : order.getDeliveryOrder().getStringDeliveredDateTime()
        }));

        // Disable all buttons
        ViewOrderDetailBut.setEnabled(false);
        AcceptOrderBut.setEnabled(false);
        DeliveredOrderBut.setEnabled(false);
    }

    private void BackButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButActionPerformed
        OODMS.frame.refresh(new DeliveryStaffHomePage());
    }//GEN-LAST:event_BackButActionPerformed

    private void SearchTxtsearchEngine(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTxtsearchEngine
        // Disable all buttons
        ViewOrderDetailBut.setEnabled(false);
        AcceptOrderBut.setEnabled(false);
        DeliveredOrderBut.setEnabled(false);

        // Get keyword from SearchTxt and filter the table using the keyword
        TableRowSorter rowSorter = new TableRowSorter((DefaultTableModel) OrderTab.getModel());
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + SearchTxt.getText(), 0, 4, 5));
        OrderTab.setRowSorter(rowSorter);
    }//GEN-LAST:event_SearchTxtsearchEngine

    private void OrderTabMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderTabMousePressed
        // Enable
        ViewOrderDetailBut.setEnabled(true);
        
        // Get selected row
        int select = OrderTab.getSelectedRow();
        
        // Take the category ID of the selected row
        String ChosenDeliveryStatus = (String) OrderTableModel.getValueAt(select, 4);
        
        if (ChosenDeliveryStatus.equalsIgnoreCase(DeliveryStatus.PENDING.toString())) {
            AcceptOrderBut.setEnabled(true);
        } else if (ChosenDeliveryStatus.equalsIgnoreCase(DeliveryStatus.DELIVERING.toString())) {
            DeliveredOrderBut.setEnabled(true);
        } else {
            AcceptOrderBut.setEnabled(false);
            DeliveredOrderBut.setEnabled(false);
        }
        
    }//GEN-LAST:event_OrderTabMousePressed

    private void AllButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllButActionPerformed
        // If pending section button is lowered, do nothing
        if (allSection) {
            return;
        }

        // Else, raised the other three and lowered pending section button
        allSection = true;
        pendingSection = false;
        deliveringSection = false;
        deliveredSection = false;
        AllBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        PendingBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        DeliveringBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        DeliveredBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));

        // Append every data with the delivery status pending into the table
        loadTable(customerOrderDao.getAllbyDeliveryStaffId((DeliveryStaff) OODMS.currentUser));
    }//GEN-LAST:event_AllButActionPerformed

    private void PendingButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PendingButActionPerformed
        // If pending section button is lowered, do nothing
        if (pendingSection) {
            return;
        }

        // Else, raised the other three and lowered pending section button
        allSection = false;
        pendingSection = true;
        deliveringSection = false;
        deliveredSection = false;
        AllBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        PendingBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        DeliveringBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        DeliveredBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));

        // Append every data with the delivery status pending into the table     
        List<CustomerOrder> customerOrder = customerOrderDao.getAllbyDeliveryStaffId((DeliveryStaff) OODMS.currentUser);
        loadTable(customerOrder.stream().filter(order -> order.getDeliveryOrder().getDeliveryStatus().equals(DeliveryStatus.PENDING)).toList());
    }//GEN-LAST:event_PendingButActionPerformed

    private void DeliveringButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeliveringButActionPerformed
        // If delivering section button is lowered, do nothing
        if (deliveringSection) {
            return;
        }

        // Else, raised the other three and lowered delivering section button
        allSection = false;
        pendingSection = false;
        deliveringSection = true;
        deliveredSection = false;
        AllBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        PendingBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        DeliveringBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        DeliveredBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));

        // Append every data with the delivery status delivering into the table
        List<CustomerOrder> customerOrder = customerOrderDao.getAllbyDeliveryStaffId((DeliveryStaff) OODMS.currentUser);
        loadTable(customerOrder.stream().filter(order -> order.getDeliveryOrder().getDeliveryStatus().equals(DeliveryStatus.DELIVERING)).toList());
    }//GEN-LAST:event_DeliveringButActionPerformed

    private void DeliveredButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeliveredButActionPerformed
        // If delivered section button is lowered, do nothing
        if (deliveredSection) {
            return;
        }

        // Else, raised the other three and lowered delivered section button
        allSection = false;
        pendingSection = false;
        deliveringSection = false;
        deliveredSection = true;
        AllBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        PendingBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        DeliveringBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        DeliveredBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));

        // Append every data with the delivery status delivered into the table
        List<CustomerOrder> customerOrder = customerOrderDao.getAllbyDeliveryStaffId((DeliveryStaff) OODMS.currentUser);
        loadTable(customerOrder.stream().filter(order -> order.getDeliveryOrder().getDeliveryStatus().equals(DeliveryStatus.DELIVERED)).toList());
    }//GEN-LAST:event_DeliveredButActionPerformed

    private void ViewOrderDetailButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewOrderDetailButActionPerformed
        // Get selected row
        int select = OrderTab.getSelectedRow();

        // Take the category ID of the selected row
        long CustomerOrderId = (long) OrderTableModel.getValueAt(select, 0);

        // Get all details of the selected order ID
        List<CustomerOrder> CustomerOrder = customerOrderDao.getById(CustomerOrderId);
        
        OODMS.frame.refresh(new ViewDeliveryOrderDetailPage(CustomerOrder.get(0)));
    }//GEN-LAST:event_ViewOrderDetailButActionPerformed

    private void AcceptOrderButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptOrderButActionPerformed
         // Confirmation on accepting order
        int option = JOptionPane.showConfirmDialog(null, "You must deliver the order after accepting.\nConfirm on accepting order?", "Accept Order", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (option != JOptionPane.OK_OPTION) {
            return;
        }

        // Get selected row
        int select = OrderTab.getSelectedRow();
        
        // Take the category ID of the selected row
        long CustomerOrderId = (long) OrderTableModel.getValueAt(select, 0);
        
        // Get all details of the selected order ID
        List<CustomerOrder> CustomerOrder = customerOrderDao.getById(CustomerOrderId);
        
        // Set delivery order details
        DeliveryOrder deliveryOrder = CustomerOrder.get(0).getDeliveryOrder();
        deliveryOrder.setDeliveryStatus(DeliveryStatus.DELIVERING);
        
        // Update text file with the newly modifed object
        if (deliveryOrderDao.fileUpdate(deliveryOrder)) {
            JOptionPane.showMessageDialog(null, "Successfully accepted order", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Failed to accept order", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
        OODMS.frame.refresh(new ViewDeliveryOrderPage());
    }//GEN-LAST:event_AcceptOrderButActionPerformed

    private void DeliveredOrderButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeliveredOrderButActionPerformed
        String feedback = JOptionPane.showInputDialog(null, "Please input the feedback", "Delivered Product", JOptionPane.INFORMATION_MESSAGE);
        if (feedback == null) {
            return;
        }
        
        // Get selected row
        int select = OrderTab.getSelectedRow();
        
        // Take the category ID of the selected row
        long CustomerOrderId = (long) OrderTableModel.getValueAt(select, 0);
        
        // Get all details of the selected order ID
        List<CustomerOrder> CustomerOrder = customerOrderDao.getById(CustomerOrderId);
        
        // Set delivery order details
        DeliveryOrder deliveryOrder = CustomerOrder.get(0).getDeliveryOrder();
        deliveryOrder.setDeliveryStatus(DeliveryStatus.DELIVERED);
        deliveryOrder.setDeliveredDateTime(LocalDateTime.now());
        deliveryOrder.setFeedback(feedback);
        
        // Update text file with the newly modifed object
        if (deliveryOrderDao.fileUpdate(deliveryOrder)) {
            JOptionPane.showMessageDialog(null, "Successfully delivered order", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Failed to input delivered order", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
        OODMS.frame.refresh(new ViewDeliveryOrderPage());
    }//GEN-LAST:event_DeliveredOrderButActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptOrderBut;
    private javax.swing.JButton AllBut;
    private javax.swing.JButton BackBut;
    private javax.swing.JButton DeliveredBut;
    private javax.swing.JButton DeliveredOrderBut;
    private javax.swing.JButton DeliveringBut;
    private javax.swing.JTable OrderTab;
    private javax.swing.JButton PendingBut;
    private javax.swing.JLabel SearchBarLab;
    private javax.swing.JLabel SearchLab;
    private javax.swing.JTextField SearchTxt;
    private javax.swing.JLabel TitleLab;
    private javax.swing.JButton ViewOrderDetailBut;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
