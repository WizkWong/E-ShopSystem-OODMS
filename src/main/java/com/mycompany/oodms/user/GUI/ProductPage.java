/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.oodms.user.GUI;

import com.mycompany.oodms.Component.JNumberField;
import com.mycompany.oodms.FileService;
import com.mycompany.oodms.OODMS;
import com.mycompany.oodms.customer.Customer;
import com.mycompany.oodms.customer.GUI.CustomerHomePage;
import com.mycompany.oodms.item.Item;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.util.List;

/**
 *
 * @author Wong Chi Jian
 */
public class ProductPage extends javax.swing.JPanel {

    DefaultTableModel productTableModel;
    DefaultTableModel categoryTableModel;

    /**
     * Creates new form ProductPage
     */
    public ProductPage() {
        initComponents();
        if (!(OODMS.currentUser instanceof Customer)) {
            addToCartBtt.setVisible(false);
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);

        categoryTableModel = (DefaultTableModel) categoryTable.getModel();
        categoryTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);

        TableColumnModel productTableColumnModel = productTable.getColumnModel();
        productTableColumnModel.getColumn(1).setCellRenderer(leftRenderer);
        productTableColumnModel.getColumn(2).setCellRenderer(centerRenderer);
        productTableColumnModel.getColumn(3).setCellRenderer(centerRenderer);
        productTableModel = (DefaultTableModel) productTable.getModel();
        productTable.removeColumn(productTableColumnModel.getColumn(0));

        List<String> categoryList = Item.readCategory();
        for (String category : categoryList) {
            categoryTableModel.addRow(new Object[] {category});
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchLb = new javax.swing.JLabel();
        noticeLb = new javax.swing.JLabel();
        addToCartBtt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTable = new javax.swing.JTable();
        JScrollPane2 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        titleLb = new javax.swing.JLabel();
        despLb = new javax.swing.JLabel();
        backBtt = new javax.swing.JButton();
        despTitleLb = new javax.swing.JLabel();
        searchFd = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(1200, 800));
        setPreferredSize(new java.awt.Dimension(1200, 800));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchLb.setText("Search Product:");
        add(searchLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 120, 40));

        noticeLb.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        noticeLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noticeLb.setText("<html>Please select a Category <br>from the left Category Table<html>");
        add(noticeLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 320, -1, -1));

        addToCartBtt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        addToCartBtt.setText("Add To Cart");
        addToCartBtt.setEnabled(false);
        addToCartBtt.setFocusable(false);
        addToCartBtt.setPreferredSize(new java.awt.Dimension(200, 50));
        addToCartBtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartBttActionPerformed(evt);
            }
        });
        add(addToCartBtt, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 730, -1, 40));

        categoryTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        categoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        categoryTable.setRowHeight(30);
        categoryTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        categoryTable.getTableHeader().setReorderingAllowed(false);
        categoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                categoryTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(categoryTable);
        if (categoryTable.getColumnModel().getColumnCount() > 0) {
            categoryTable.getColumnModel().getColumn(0).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 180, 660));

        productTable.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Stock Avaiable"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.setRowHeight(25);
        productTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productTable.getTableHeader().setReorderingAllowed(false);
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                productTableMousePressed(evt);
            }
        });
        JScrollPane2.setViewportView(productTable);

        add(JScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 560, 660));

        titleLb.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        titleLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLb.setText("Product");
        add(titleLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, -1, -1));

        despLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        despLb.setText("Please select any product from product table");
        despLb.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        despLb.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        despLb.setOpaque(true);
        add(despLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 110, 380, 600));

        backBtt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        backBtt.setText("Back");
        backBtt.setFocusable(false);
        backBtt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backBtt.setInheritsPopupMenu(true);
        backBtt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        backBtt.setPreferredSize(new java.awt.Dimension(200, 50));
        backBtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBttActionPerformed(evt);
            }
        });
        add(backBtt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 40));

        despTitleLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        despTitleLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        despTitleLb.setText("Description");
        despTitleLb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        despTitleLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(despTitleLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 70, 380, 30));

        searchFd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchEngine(evt);
            }
        });
        add(searchFd, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 640, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartBttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartBttActionPerformed
        int select = productTable.getSelectedRow();
        if (select < 0) {
            return;
        }
        long id = (long) productTableModel.getValueAt(select, 0);
        Item item = Item.searchId(id);
        if (item == null) {
            JOptionPane.showMessageDialog(null, "Error", "Product does not exist", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JLabel itemLb = new JLabel("Product Name: " + item.getName());
        itemLb.setPreferredSize(new Dimension(250, 20));

        JLabel priceLb = new JLabel("Price: RM " + item.getPrice());
        priceLb.setPreferredSize(new Dimension(200, 20));

        JLabel stockLb = new JLabel("Stock Left: " + item.getStock());
        stockLb.setPreferredSize(new Dimension(200, 20));

        JLabel qtyLb = new JLabel("Quantity: ");
        qtyLb.setPreferredSize(new Dimension(65, 20));

        JNumberField quantityFd = new JNumberField();
        quantityFd.setColumns(8);

        JPanel box = new JPanel();
        box.setPreferredSize(new Dimension(220, 100));
        box.setLayout(new FlowLayout(FlowLayout.LEADING, 0, 5));

        box.add(itemLb);
        box.add(priceLb);
        box.add(stockLb);
        box.add(qtyLb);
        box.add(quantityFd);

        int option = JOptionPane.showConfirmDialog(null, box, "Add to Cart", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {
            Customer customer = (Customer) OODMS.currentUser;
            if (customer.addCartItem(item, quantityFd.getInteger())) {
                JOptionPane.showMessageDialog(null, "Successfully added into cart", "Success", JOptionPane.PLAIN_MESSAGE);
            }
        }

    }//GEN-LAST:event_addToCartBttActionPerformed

    private void backBttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBttActionPerformed
        if (OODMS.currentUser instanceof Customer) {
            OODMS.frame.refresh(new CustomerHomePage());
            return;
        }
        OODMS.frame.refresh(new HomePage());
    }//GEN-LAST:event_backBttActionPerformed

    private void categoryTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryTableMousePressed
        int select = categoryTable.getSelectedRow();
        addToCartBtt.setEnabled(false);
        noticeLb.setVisible(false);
        despLb.setText("Please select any product from product table");
        searchFd.setText("");
        String category = (String) categoryTableModel.getValueAt(select, 0);
        int itemRow = productTableModel.getRowCount();
        for (int i = itemRow - 1; i >= 0 ; i--) {
            productTableModel.removeRow(i);
        }
        List<Item> itemList = FileService.readFile(Item.FILENAME).stream().map(Item::new).toList();
        itemList = itemList.stream().filter(item -> item.getCategory().equals(category)).toList();
        itemList.forEach(
                item -> productTableModel.addRow(new Object[] {item.getId(), item.getName(), item.getPrice(), item.getStock()}));
    }//GEN-LAST:event_categoryTableMousePressed

    private void productTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMousePressed
        addToCartBtt.setText("Add To Cart");
        addToCartBtt.setEnabled(true);
        int select = productTable.getSelectedRow();
        long id = (long) productTableModel.getValueAt(select, 0);
        Item item = Item.searchId(id);
        if (item == null) {
            despLb.setText("Error, selected product cannot be found");
            return;
        }
        despLb.setText(item.getDescription());
        if (!(OODMS.currentUser instanceof Customer)) {
            return;
        }
        Customer customer = (Customer) OODMS.currentUser;
        if (customer.checkItemExistInCart(item)) {
            addToCartBtt.setEnabled(false);
            addToCartBtt.setText("Item Added In Cart");
        }
        if (!item.checkStockAvailable()) {
            addToCartBtt.setEnabled(false);
        }
    }//GEN-LAST:event_productTableMousePressed

    private void searchEngine(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchEngine
        int select = categoryTable.getSelectedRow();
        if (select < 0) {
            return;
        }
        addToCartBtt.setEnabled(false);
        despLb.setText("Please select any product from product table");
        String category = (String) categoryTableModel.getValueAt(select, 0);
        int itemRow = productTableModel.getRowCount();
        for (int i = itemRow - 1; i >= 0 ; i--) {
            productTableModel.removeRow(i);
        }
        String searchTxt = searchFd.getText().toLowerCase();
        List<Item> itemList = FileService.readFile(Item.FILENAME).stream().map(Item::new).toList();
        if (searchTxt.equals("")) {
            itemList = itemList.stream().filter(item -> item.getCategory().equals(category)).toList();
            itemList.forEach(
                    item -> productTableModel.addRow(new Object[] {item.getId(), item.getName(), item.getPrice(), item.getStock()}));
            return;
        }
        itemList = itemList.stream().filter(item -> item.getCategory().equals(category) && item.getName().toLowerCase().startsWith(searchTxt)).toList();
        itemList.forEach(
                item -> productTableModel.addRow(new Object[] {item.getId(), item.getName(), item.getPrice(), item.getStock()}));
    }//GEN-LAST:event_searchEngine


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScrollPane2;
    private javax.swing.JButton addToCartBtt;
    private javax.swing.JButton backBtt;
    private javax.swing.JTable categoryTable;
    private javax.swing.JLabel despLb;
    private javax.swing.JLabel despTitleLb;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel noticeLb;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField searchFd;
    private javax.swing.JLabel searchLb;
    private javax.swing.JLabel titleLb;
    // End of variables declaration//GEN-END:variables
}
