package com.mycompany.oodms.admin.GUI;

import com.mycompany.oodms.OODMS;
import com.mycompany.oodms.customer.Customer;
import com.mycompany.oodms.customer.CustomerDao;
import com.mycompany.oodms.deliveryStaff.DeliveryStaff;
import com.mycompany.oodms.deliveryStaff.DeliveryStaffDao;
import com.mycompany.oodms.order.CustomerOrder;
import com.mycompany.oodms.order.CustomerOrderDao;
import com.mycompany.oodms.order.DeliveryOrder;
import com.mycompany.oodms.order.DeliveryOrderDao;
import com.mycompany.oodms.order.DeliveryStatus;
import com.mycompany.oodms.user.UserDao;
import java.time.LocalDateTime;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class OrderDeliveryManagementPage extends javax.swing.JPanel {
    
    private final DefaultTableModel OrderTableModel;
    private final List<CustomerOrder> customerOrderList;
    private final CustomerOrderDao customerOrderDao;
    private final DeliveryOrderDao deliveryOrderDao;
    private final DeliveryStaffDao deliveryStaffDao;
    
    private boolean allSection;
    private boolean assignedSection;
    private boolean unassignedSection;
    
    public OrderDeliveryManagementPage() {
        customerOrderDao = OODMS.getCustomerOrderDao();
        deliveryOrderDao = OODMS.getDeliveryOrderDao();
        deliveryStaffDao = OODMS.getDeliveryStaffDao();
        initComponents();
        
        // Set each section button to true and false, true if lowered, false if raised
        allSection = true;
        assignedSection = false;
        unassignedSection = false;
        
        // Disable both modify and delete button
        ViewOrderBut.setEnabled(false);
        AssignOrderBut.setEnabled(false);
        
        //Only allow selection on single row
        OrderTab.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        //Not allowing focus selection on single cell
        OrderTab.setFocusable(false);
        
        // Set height and width for each row and column
        OrderTab.getColumnModel().getColumn(0).setPreferredWidth(15);        
        OrderTab.getColumnModel().getColumn(1).setPreferredWidth(85);
        OrderTab.getColumnModel().getColumn(2).setPreferredWidth(60);
        OrderTab.getColumnModel().getColumn(3).setPreferredWidth(100);
        OrderTab.getColumnModel().getColumn(4).setPreferredWidth(70);
        OrderTab.getColumnModel().getColumn(5).setPreferredWidth(65);
        OrderTab.getColumnModel().getColumn(6).setPreferredWidth(130);
        OrderTab.getColumnModel().getColumn(7).setPreferredWidth(100);
        OrderTab.getColumnModel().getColumn(8).setPreferredWidth(100);
        OrderTab.setRowHeight(20);
        
        // Center the allignment for both column
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        OrderTab.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
        OrderTab.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
        
        OrderTableModel = (DefaultTableModel) OrderTab.getModel();
        
        // Get every data of every customer order
        customerOrderList = customerOrderDao.getAll();
        
        // Append every data into the table
        loadTable(customerOrderList);    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackBut = new javax.swing.JButton();
        SearchLab = new javax.swing.JLabel();
        SearchTxt = new javax.swing.JTextField();
        AllBut = new javax.swing.JButton();
        UnassignedBut = new javax.swing.JButton();
        AssignedBut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderTab = new javax.swing.JTable();
        ViewOrderBut = new javax.swing.JButton();
        AssignOrderBut = new javax.swing.JButton();
        TitleLab = new javax.swing.JLabel();
        SearchBarLab = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1265, 600));
        setPreferredSize(new java.awt.Dimension(1265, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BackBut.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BackBut.setText("Back");
        BackBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButActionPerformed(evt);
            }
        });
        add(BackBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        SearchLab.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchLab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SearchLab.setText("Search Order :");
        add(SearchLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 100, 40));

        SearchTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTxtsearchEngine(evt);
            }
        });
        add(SearchTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 860, -1));

        AllBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        AllBut.setText("All");
        AllBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        AllBut.setFocusable(false);
        AllBut.setMargin(new java.awt.Insets(3, 14, 3, 14));
        AllBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllButActionPerformed(evt);
            }
        });
        add(AllBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 140, -1));

        UnassignedBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        UnassignedBut.setText("Unassigned");
        UnassignedBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        UnassignedBut.setFocusable(false);
        UnassignedBut.setMargin(new java.awt.Insets(3, 14, 3, 14));
        UnassignedBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnassignedButActionPerformed(evt);
            }
        });
        add(UnassignedBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 140, -1));

        AssignedBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        AssignedBut.setText("Assigned");
        AssignedBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        AssignedBut.setFocusable(false);
        AssignedBut.setMargin(new java.awt.Insets(3, 14, 3, 14));
        AssignedBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignedButActionPerformed(evt);
            }
        });
        add(AssignedBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 140, -1));

        OrderTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Total Product Type", "Total Price", "Order Date Time", "Delivery Status", "Customer ID", "Assigned Delivery Staff ID", "Assigned Date Time", "Delivered Date Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderTab.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        OrderTab.getTableHeader().setReorderingAllowed(false);
        OrderTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OrderTabMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(OrderTab);
        if (OrderTab.getColumnModel().getColumnCount() > 0) {
            OrderTab.getColumnModel().getColumn(0).setResizable(false);
            OrderTab.getColumnModel().getColumn(1).setResizable(false);
            OrderTab.getColumnModel().getColumn(2).setResizable(false);
            OrderTab.getColumnModel().getColumn(3).setResizable(false);
            OrderTab.getColumnModel().getColumn(4).setResizable(false);
            OrderTab.getColumnModel().getColumn(5).setResizable(false);
            OrderTab.getColumnModel().getColumn(6).setResizable(false);
            OrderTab.getColumnModel().getColumn(7).setResizable(false);
            OrderTab.getColumnModel().getColumn(8).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 970, -1));

        ViewOrderBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        ViewOrderBut.setText("View Order");
        ViewOrderBut.setToolTipText("");
        ViewOrderBut.setFocusable(false);
        ViewOrderBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewOrderButActionPerformed(evt);
            }
        });
        add(ViewOrderBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 270, 150, -1));

        AssignOrderBut.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        AssignOrderBut.setText("Assign Order");
        AssignOrderBut.setToolTipText("");
        AssignOrderBut.setFocusable(false);
        AssignOrderBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignOrderButActionPerformed(evt);
            }
        });
        add(AssignOrderBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 340, 150, -1));

        TitleLab.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        TitleLab.setText("Order Delivery Management");
        add(TitleLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, -1, -1));

        SearchBarLab.setForeground(new java.awt.Color(204, 0, 255));
        SearchBarLab.setText("*Only Order ID, Delivery Status, Customer ID & Assigned Delivery Staff ID can be search");
        add(SearchBarLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, -1, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void loadTable(List<CustomerOrder> customerOrderList) {
        // Remove all the data from the table
        int itemRow = OrderTableModel.getRowCount();
        for (int i = itemRow - 1; i >= 0 ; i--) {
            OrderTableModel.removeRow(i);
        }
        
        // Add every data into the table
        customerOrderList.forEach(order -> OrderTableModel.addRow(new Object[] {
                order.getId(),
                order.getOrderDetail().size(),
                order.getCustomerOrderPayment().getTotalPrice(),
                order.getStringOrderDateTime(),
                order.getDeliveryOrder().getDeliveryStatus().getStatus(),
                order.getCustomer().getId(),
                order.getDeliveryOrder().getDeliveryStaff()==null?"N/A":order.getDeliveryOrder().getDeliveryStaff().getId(),
                order.getDeliveryOrder().getStringAssignDateTime()==null?"N/A":order.getDeliveryOrder().getStringAssignDateTime(),
                order.getDeliveryOrder().getStringDeliveredDateTime()==null?"N/A":order.getDeliveryOrder().getStringDeliveredDateTime()                        
        }));
        
        // Disable both view order and assign order button
        ViewOrderBut.setEnabled(false);
        AssignOrderBut.setEnabled(false);
    }
    
    private void BackButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButActionPerformed
        OODMS.frame.refresh(new AdminPanelForm());
    }//GEN-LAST:event_BackButActionPerformed

    private void SearchTxtsearchEngine(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTxtsearchEngine
        // Disable both view order and assign order button
        ViewOrderBut.setEnabled(false);
        AssignOrderBut.setEnabled(false);

        // Get keyword from SearchTxt and filter the table using the keyword
        TableRowSorter rowSorter = new TableRowSorter((DefaultTableModel) OrderTab.getModel());
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + SearchTxt.getText(), 0, 4, 5, 6));
        OrderTab.setRowSorter(rowSorter);
    }//GEN-LAST:event_SearchTxtsearchEngine

    private void AllButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllButActionPerformed
        // If all section button is lowered, do nothing
        if (allSection) {
            return;
        }
        
        // Else, raised the other two and lowered all section button
        allSection = true;
        assignedSection = false;
        unassignedSection = false;
        AllBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        AssignedBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        UnassignedBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        
        // Append every data into the table
        loadTable(customerOrderList);
    }//GEN-LAST:event_AllButActionPerformed

    private void UnassignedButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnassignedButActionPerformed
        // If unassigned section button is lowered, do nothing
        if (unassignedSection) {
            return;
        }
        
        // Else, raised the other two and lowered unassigned section button
        allSection = false;
        assignedSection = false;
        unassignedSection = true;
        AllBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        AssignedBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        UnassignedBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        
        // Append every data with the delivery status unassigned into the table
        loadTable(customerOrderList.stream().filter(order -> order.getDeliveryOrder().getDeliveryStatus().equals(DeliveryStatus.UNASSIGNED)).toList());
    }//GEN-LAST:event_UnassignedButActionPerformed

    private void AssignedButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignedButActionPerformed
        // If assigned section button is lowered, do nothing
        if (assignedSection) {
            return;
        }
        
        // Else, raised the other two and lowered assigned section button
        allSection = false;
        assignedSection = true;
        unassignedSection = false;
        AllBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        AssignedBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        UnassignedBut.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        
        // Append every data without the delivery status unassigned into the table
        loadTable(customerOrderList.stream().filter(order -> !order.getDeliveryOrder().getDeliveryStatus().equals(DeliveryStatus.UNASSIGNED)).toList());
    }//GEN-LAST:event_AssignedButActionPerformed

    private void ViewOrderButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewOrderButActionPerformed
        // Get selected row
        int select = OrderTab.getSelectedRow();
        
        // Take the category ID of the selected row
        long CustomerOrderId = (long) OrderTableModel.getValueAt(select, 0);
        
        // Get all details of the selected order ID
        List<CustomerOrder> CustomerOrder = customerOrderDao.getById(CustomerOrderId);
        
        OODMS.frame.refresh(new ViewOrderPage(CustomerOrder.get(0)));
    }//GEN-LAST:event_ViewOrderButActionPerformed

    private void AssignOrderButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignOrderButActionPerformed
        // Get selected row
        int select = OrderTab.getSelectedRow();
        
        // Take the category ID of the selected row
        long CustomerOrderId = (long) OrderTableModel.getValueAt(select, 0);
        
        // Get all details of the selected order ID
        List<CustomerOrder> CustomerOrder = customerOrderDao.getById(CustomerOrderId);
        
        // Get every delivery stuff data using deliveryStaffDao.getAll method
        List<DeliveryStaff> allDeliveryStaff = deliveryStaffDao.getAll();
        
        // Make an array with the size of allDeliveryStaff list
        String DeliveryStaffArray[] = new String[allDeliveryStaff.size()];
        
        
        Boolean NullValue = false;
        // Append every delivery stuff username except the current assigned delivery staff into the DeliveryStaffArray
        for (int i = 0; i < allDeliveryStaff.size(); i++) {
            // If the a username in the text file is same with the current assigned username, null will be added instead
            if (!allDeliveryStaff.get(i).getId().equals(OrderTableModel.getValueAt(select, 6))) {
                DeliveryStaffArray[i] = allDeliveryStaff.get(i).getUsername();
            } else {
                NullValue = true;
            }
        }

        // Show input dialog with the delivery stuff username as option
        String choice = null;
        // If there is null value in DeliveryStaffArray, it will be remove and change to NewDeliveryStaffArray
        if (NullValue) {
            String NewDeliveryStaffArray[] = new String[DeliveryStaffArray.length - 1];
            int i1 = 0;
            for (int i2 = 0; i2 < DeliveryStaffArray.length; i2++) {
                if (DeliveryStaffArray[i2] == null) {   
                } else {
                    System.out.print(DeliveryStaffArray[i2]);
                    NewDeliveryStaffArray[i1] = DeliveryStaffArray[i2];
                    i1 += 1;
                }
            }

            choice = (String)JOptionPane.showInputDialog(null, "Which delivery staff do you want to change to?", 
            "Assign Order", JOptionPane.QUESTION_MESSAGE, null, NewDeliveryStaffArray, null);
        } else {
            choice = (String)JOptionPane.showInputDialog(null, "Which delivery staff do you want to assign to?", 
            "Assign Order", JOptionPane.QUESTION_MESSAGE, null, DeliveryStaffArray, null);
        }
                
        // If cancel button is press
        if (choice == null) {
            return;
        }
        
        // Get delivery staff object by using the username from the choice
        DeliveryStaff deliveryStaff = null;
        for (int i = 0; i < allDeliveryStaff.size(); i++) {
            if (allDeliveryStaff.get(i).getUsername().equals(choice)) {
                deliveryStaff = allDeliveryStaff.get(i);
            }
        }
        
        // Set delivery order details
        DeliveryOrder deliveryOrder = CustomerOrder.get(0).getDeliveryOrder();
        deliveryOrder.setDeliveryStatus(DeliveryStatus.PENDING);
        deliveryOrder.setDeliveryStaff(deliveryStaff);
        deliveryOrder.setAssignDateTime(LocalDateTime.now());
        
        // Modify text file with the newly modifed object
        if (deliveryOrderDao.fileUpdate(deliveryOrder)) {
            JOptionPane.showMessageDialog(null, "Successfully assigned order to " +  deliveryStaff.getUsername(), "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Failed to assign order", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
        OODMS.frame.refresh(new OrderDeliveryManagementPage());
    }//GEN-LAST:event_AssignOrderButActionPerformed

    private void OrderTabMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderTabMousePressed
        // Enable both view order and assign order button
        ViewOrderBut.setEnabled(true);
        
        // Get selected row
        int select = OrderTab.getSelectedRow();
        
        // Take the category ID of the selected row
        String ChosenDeliveryStatus = (String) OrderTableModel.getValueAt(select, 4);
        
        if (ChosenDeliveryStatus.equalsIgnoreCase(DeliveryStatus.UNASSIGNED.toString()) 
                || ChosenDeliveryStatus.equalsIgnoreCase(DeliveryStatus.PENDING.toString())) {
            AssignOrderBut.setEnabled(true);
        } else {
            AssignOrderBut.setEnabled(false);
        }
    }//GEN-LAST:event_OrderTabMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AllBut;
    private javax.swing.JButton AssignOrderBut;
    private javax.swing.JButton AssignedBut;
    private javax.swing.JButton BackBut;
    private javax.swing.JTable OrderTab;
    private javax.swing.JLabel SearchBarLab;
    private javax.swing.JLabel SearchLab;
    private javax.swing.JTextField SearchTxt;
    private javax.swing.JLabel TitleLab;
    private javax.swing.JButton UnassignedBut;
    private javax.swing.JButton ViewOrderBut;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
