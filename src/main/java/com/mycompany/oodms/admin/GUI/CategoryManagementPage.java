/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.oodms.admin.GUI;

import com.mycompany.oodms.Component.EditCategoryForm;
import com.mycompany.oodms.OODMS;
import com.mycompany.oodms.item.Item;
import com.mycompany.oodms.item.ItemDao;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showInputDialog;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USER
 */
public class CategoryManagementPage extends javax.swing.JPanel {
    
    private final DefaultTableModel CategoryTableModel;
    private final ItemDao itemDao;
    
    public CategoryManagementPage() {
        initComponents();
        itemDao = OODMS.getItemDao();
        
        // Disable both modify and delete button
        ModifyCatBut.setEnabled(false);
        DeleteCatBut.setEnabled(false);
        
        //Only allow selection on single row
        CategoryTab.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        //Not allowing focus selection on single cell
        CategoryTab.setFocusable(false);
        
        // Set height and width for each row and column
        CategoryTab.getColumnModel().getColumn(0).setPreferredWidth(50);        
        CategoryTab.getColumnModel().getColumn(1).setPreferredWidth(300);
        CategoryTab.setRowHeight(20);
        
        // Center the allignment for both column
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        CategoryTab.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        CategoryTab.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        
        // Append data into the table
        CategoryTableModel = (DefaultTableModel) CategoryTab.getModel();
        
        List<List<String>> categoryList = itemDao.getAllCategoryIdAndName();
        for (List<String> category : categoryList) {
            CategoryTableModel.addRow(new Object[] {Long.valueOf(category.get(0)), category.get(1)});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLab = new javax.swing.JLabel();
        BackBut = new javax.swing.JButton();
        SeachLab = new javax.swing.JLabel();
        SearchTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        CategoryTab = new javax.swing.JTable();
        ModifyCatBut = new javax.swing.JButton();
        DeleteCatBut = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 450));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TitleLab.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        TitleLab.setText("Category Management");
        add(TitleLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        BackBut.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BackBut.setText("Back");
        BackBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButActionPerformed(evt);
            }
        });
        add(BackBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 30));

        SeachLab.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        SeachLab.setText("Category ID/NAME :");
        add(SeachLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 160, 30));

        SearchTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        SearchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTxtKeyReleased(evt);
            }
        });
        add(SearchTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 310, 30));

        CategoryTab.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        CategoryTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CategoryTab.getTableHeader().setReorderingAllowed(false);
        CategoryTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CategoryTabMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(CategoryTab);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 410, 250));

        ModifyCatBut.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ModifyCatBut.setText("Modify Category");
        ModifyCatBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyCatButActionPerformed(evt);
            }
        });
        add(ModifyCatBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, 170, 40));

        DeleteCatBut.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        DeleteCatBut.setText("Delete Category");
        DeleteCatBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCatButActionPerformed(evt);
            }
        });
        add(DeleteCatBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 380, 170, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void BackButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButActionPerformed
        OODMS.frame.refresh(new AdminPanelForm());
    }//GEN-LAST:event_BackButActionPerformed

    private void ModifyCatButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyCatButActionPerformed
        // Get selected row
        int select = CategoryTab.getSelectedRow();

        // Take the category ID of the selected row
        long CatId = (long) CategoryTableModel.getValueAt(select, 0);

        // Run the edit category form
        EditCategoryForm EditCategoryform = new EditCategoryForm(CatId);
        
        while (true) {
            int option = JOptionPane.showConfirmDialog(null, EditCategoryform, "Edit Category", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
            
            // If press cancel
            if (option != JOptionPane.OK_OPTION) {
                break;
            }
            
            // Check validation by using the method EditCategoryform.formValidate
            if (EditCategoryform.formValidate(CatId)) {
                // Refresh Page
                OODMS.frame.refresh(new CategoryManagementPage());
                break;
            }
        }
            
            
         
            
    }//GEN-LAST:event_ModifyCatButActionPerformed

    private void DeleteCatButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCatButActionPerformed
        // Confirmation on deleting product
        int option = JOptionPane.showConfirmDialog(null, "Every product in this category will be deleted.\nConfirm on deleting category?"
                , "Delete Product", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (option != JOptionPane.OK_OPTION) {
            return;
        }
        
        // Get selected row
        int select = CategoryTab.getSelectedRow();

        // Take the category ID of the selected row
        long CatId = (long) CategoryTableModel.getValueAt(select, 0);
        
        // Delete category using itemDao.deleteCategory method
        itemDao.deleteCategory(CatId);
        
        // Delete every product in that category
        List<Item> itemList = itemDao.getAll();
        itemList = itemList.stream().filter(item -> item.getCategoryId().equals(CatId)).toList();       
        itemList.forEach(item -> itemDao.remove(item));                
        
        JOptionPane.showMessageDialog(null, "Successfully Deleted Category", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        // Refresh Page
        OODMS.frame.refresh(new CategoryManagementPage());
    }//GEN-LAST:event_DeleteCatButActionPerformed

    private void CategoryTabMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CategoryTabMousePressed
        // Enable both modify and delete button
        ModifyCatBut.setEnabled(true);
        DeleteCatBut.setEnabled(true);
    }//GEN-LAST:event_CategoryTabMousePressed

    private void SearchTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTxtKeyReleased
        // Disable both modify and delete button
        ModifyCatBut.setEnabled(false);
        DeleteCatBut.setEnabled(false);

        // Get keyword from SearchTxt and filter the table using the keyword
        TableRowSorter rowSorter = new TableRowSorter((DefaultTableModel) CategoryTab.getModel());
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + SearchTxt.getText(), 0, 1));
        CategoryTab.setRowSorter(rowSorter);
    }//GEN-LAST:event_SearchTxtKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBut;
    private javax.swing.JTable CategoryTab;
    private javax.swing.JButton DeleteCatBut;
    private javax.swing.JButton ModifyCatBut;
    private javax.swing.JLabel SeachLab;
    private javax.swing.JTextField SearchTxt;
    private javax.swing.JLabel TitleLab;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
